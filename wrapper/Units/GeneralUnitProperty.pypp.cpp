// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "GeneralUnitProperty.pypp.hpp"

namespace bp = boost::python;

#include "generalunit.h"

#include "SireBase/lengthproperty.h"

#include "SireBase/numberproperty.h"

#include "SireBase/timeproperty.h"

#include "SireBase/variantproperty.h"

#include "SireError/errors.h"

#include "SireMaths/maths.h"

#include "SireUnits/dimensions.h"

#include "SireUnits/temperature.h"

#include "generalunit.h"

#include <Python.h>

#include <QHash>

#include <QMutex>

#include <QStringList>

#include <boost/python.hpp>

SireUnits::Dimension::GeneralUnitProperty __copy__(const SireUnits::Dimension::GeneralUnitProperty &other){ return SireUnits::Dimension::GeneralUnitProperty(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_GeneralUnitProperty_class(){

    { //::SireUnits::Dimension::GeneralUnitProperty
        typedef bp::class_< SireUnits::Dimension::GeneralUnitProperty, bp::bases< SireUnits::Dimension::GeneralUnit, SireUnits::Dimension::Unit, SireBase::Property > > GeneralUnitProperty_exposer_t;
        GeneralUnitProperty_exposer_t GeneralUnitProperty_exposer = GeneralUnitProperty_exposer_t( "GeneralUnitProperty", "This class provides a thin Property wrapper around GeneralUnits\n\nAuthor: Christopher Woods\n", bp::init< >("") );
        bp::scope GeneralUnitProperty_scope( GeneralUnitProperty_exposer );
        GeneralUnitProperty_exposer.def( bp::init< SireUnits::Dimension::GeneralUnit >(( bp::arg("value") ), "") );
        GeneralUnitProperty_exposer.def( bp::init< SireUnits::Dimension::GeneralUnitProperty const & >(( bp::arg("other") ), "") );
        GeneralUnitProperty_exposer.def( bp::init< SireBase::Property const & >(( bp::arg("other") ), "") );
        GeneralUnitProperty_exposer.def( bp::self != bp::self );
        { //::SireUnits::Dimension::GeneralUnitProperty::operator=
        
            typedef ::SireUnits::Dimension::GeneralUnitProperty & ( ::SireUnits::Dimension::GeneralUnitProperty::*assign_function_type)( ::SireUnits::Dimension::GeneralUnitProperty const & ) ;
            assign_function_type assign_function_value( &::SireUnits::Dimension::GeneralUnitProperty::operator= );
            
            GeneralUnitProperty_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        GeneralUnitProperty_exposer.def( bp::self == bp::self );
        { //::SireUnits::Dimension::GeneralUnitProperty::toString
        
            typedef ::QString ( ::SireUnits::Dimension::GeneralUnitProperty::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireUnits::Dimension::GeneralUnitProperty::toString );
            
            GeneralUnitProperty_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireUnits::Dimension::GeneralUnitProperty::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireUnits::Dimension::GeneralUnitProperty::typeName );
            
            GeneralUnitProperty_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        GeneralUnitProperty_exposer.staticmethod( "typeName" );
        GeneralUnitProperty_exposer.def( "__copy__", &__copy__);
        GeneralUnitProperty_exposer.def( "__deepcopy__", &__copy__);
        GeneralUnitProperty_exposer.def( "clone", &__copy__);
        GeneralUnitProperty_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireUnits::Dimension::GeneralUnitProperty >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GeneralUnitProperty_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireUnits::Dimension::GeneralUnitProperty >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GeneralUnitProperty_exposer.def_pickle(sire_pickle_suite< ::SireUnits::Dimension::GeneralUnitProperty >());
        GeneralUnitProperty_exposer.def( "__str__", &__str__< ::SireUnits::Dimension::GeneralUnitProperty > );
        GeneralUnitProperty_exposer.def( "__repr__", &__str__< ::SireUnits::Dimension::GeneralUnitProperty > );
    }

}
