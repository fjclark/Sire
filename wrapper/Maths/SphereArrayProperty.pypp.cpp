// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "SphereArrayProperty.pypp.hpp"

namespace bp = boost::python;

#include "SireMaths/sphereproperty.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "sphereproperty.h"

#include "sphereproperty.h"

SireMaths::SphereArrayProperty __copy__(const SireMaths::SphereArrayProperty &other){ return SireMaths::SphereArrayProperty(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

#include "Helpers/len.hpp"

void register_SphereArrayProperty_class(){

    { //::SireMaths::SphereArrayProperty
        typedef bp::class_< SireMaths::SphereArrayProperty, bp::bases< SireBase::ArrayProperty<SireMaths::Sphere>, SireBase::Property > > SphereArrayProperty_exposer_t;
        SphereArrayProperty_exposer_t SphereArrayProperty_exposer = SphereArrayProperty_exposer_t( "SphereArrayProperty", "", bp::init< >("") );
        bp::scope SphereArrayProperty_scope( SphereArrayProperty_exposer );
        SphereArrayProperty_exposer.def( bp::init< QList< SireMaths::Sphere > const & >(( bp::arg("array") ), "") );
        SphereArrayProperty_exposer.def( bp::init< QVector< SireMaths::Sphere > const & >(( bp::arg("array") ), "") );
        SphereArrayProperty_exposer.def( bp::init< SireMaths::SphereArrayProperty const & >(( bp::arg("other") ), "") );
        SphereArrayProperty_exposer.def( bp::self != bp::self );
        SphereArrayProperty_exposer.def( bp::self + bp::self );
        { //::SireMaths::SphereArrayProperty::operator=
        
            typedef ::SireMaths::SphereArrayProperty & ( ::SireMaths::SphereArrayProperty::*assign_function_type)( ::SireMaths::SphereArrayProperty const & ) ;
            assign_function_type assign_function_value( &::SireMaths::SphereArrayProperty::operator= );
            
            SphereArrayProperty_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        SphereArrayProperty_exposer.def( bp::self == bp::self );
        { //::SireMaths::SphereArrayProperty::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMaths::SphereArrayProperty::typeName );
            
            SphereArrayProperty_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        SphereArrayProperty_exposer.staticmethod( "typeName" );
        SphereArrayProperty_exposer.def( "__copy__", &__copy__);
        SphereArrayProperty_exposer.def( "__deepcopy__", &__copy__);
        SphereArrayProperty_exposer.def( "clone", &__copy__);
        SphereArrayProperty_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMaths::SphereArrayProperty >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SphereArrayProperty_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMaths::SphereArrayProperty >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SphereArrayProperty_exposer.def_pickle(sire_pickle_suite< ::SireMaths::SphereArrayProperty >());
        SphereArrayProperty_exposer.def( "__str__", &__str__< ::SireMaths::SphereArrayProperty > );
        SphereArrayProperty_exposer.def( "__repr__", &__str__< ::SireMaths::SphereArrayProperty > );
        SphereArrayProperty_exposer.def( "__len__", &__len_size< ::SireMaths::SphereArrayProperty > );
        SphereArrayProperty_exposer.def( "__getitem__", &::SireMaths::SphereArrayProperty::getitem );
    }

}
